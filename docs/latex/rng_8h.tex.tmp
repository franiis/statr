\hypertarget{rng_8h}{}\section{statr/src/rng.h File Reference}
\label{rng_8h}\index{statr/src/rng.\+h@{statr/src/rng.\+h}}


Header for internal R\+NG implementation.  


This graph shows which files directly or indirectly include this file\+:
% FIG 0
\subsection*{Data Structures}
\begin{DoxyCompactItemize}
\item 
struct \hyperlink{structRNG__state__t}{R\+N\+G\+\_\+state\+\_\+t}
\begin{DoxyCompactList}\small\item\em Structure for storing R\+NG state. \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
double \hyperlink{rng_8h_aee2f3820ccff61a0627c98890cd20b5c}{unif\+\_\+rand} (\hyperlink{structRNG__state__t}{R\+N\+G\+\_\+state\+\_\+t} $\ast$$\ast$state)
\begin{DoxyCompactList}\small\item\em Generates pseudorandom number based on Mersenne-\/\+Twister algorithm from uniform distribution. \end{DoxyCompactList}\item 
double \hyperlink{rng_8h_aaa40d02ceaf0ecc4a97d394914b21314}{norm\+\_\+rand} (\hyperlink{structRNG__state__t}{R\+N\+G\+\_\+state\+\_\+t} $\ast$$\ast$state)
\begin{DoxyCompactList}\small\item\em Generates pseudorandom number based on Mersenne-\/\+Twister algorithm from normal distribution. \end{DoxyCompactList}\item 
\hyperlink{structRNG__state__t}{R\+N\+G\+\_\+state\+\_\+t} $\ast$ \hyperlink{rng_8h_af9c03e9b659b227ab093957cbfc57847}{create\+\_\+\+R\+N\+G\+\_\+state} (unsigned int seed)
\begin{DoxyCompactList}\small\item\em Creates \hyperlink{structRNG__state__t}{R\+N\+G\+\_\+state\+\_\+t} instance for storing pseudorandom generator state. \end{DoxyCompactList}\item 
void \hyperlink{rng_8h_a682d4f3e410509ffdcf17afa3f7e2393}{delete\+\_\+\+R\+N\+G\+\_\+state} (\hyperlink{structRNG__state__t}{R\+N\+G\+\_\+state\+\_\+t} $\ast$state)
\begin{DoxyCompactList}\small\item\em Deletes \hyperlink{structRNG__state__t}{R\+N\+G\+\_\+state\+\_\+t} object. \end{DoxyCompactList}\end{DoxyCompactItemize}


\subsection{Detailed Description}
Header for internal R\+NG implementation. 

\begin{DoxyAuthor}{Author}
Piotr Krzeszewski 
\end{DoxyAuthor}
\begin{DoxyDate}{Date}
10 Mar 2018 Header defines methods for internal generation of pseudorandom number sequences. For generating numbers from such sequences check \hyperlink{distr_8h_source}{distr.\+h} header and presented there methods. 
\end{DoxyDate}
\begin{DoxySeeAlso}{See also}
\href{https://github.com/franiis/statr}{\tt https\+://github.\+com/franiis/statr} 
\end{DoxySeeAlso}


\subsection{Function Documentation}
\mbox{\Hypertarget{rng_8h_af9c03e9b659b227ab093957cbfc57847}\label{rng_8h_af9c03e9b659b227ab093957cbfc57847}} 
\index{rng.\+h@{rng.\+h}!create\+\_\+\+R\+N\+G\+\_\+state@{create\+\_\+\+R\+N\+G\+\_\+state}}
\index{create\+\_\+\+R\+N\+G\+\_\+state@{create\+\_\+\+R\+N\+G\+\_\+state}!rng.\+h@{rng.\+h}}
\subsubsection{\texorpdfstring{create\+\_\+\+R\+N\+G\+\_\+state()}{create\_RNG\_state()}}
{\footnotesize\ttfamily \hyperlink{structRNG__state__t}{R\+N\+G\+\_\+state\+\_\+t}$\ast$ create\+\_\+\+R\+N\+G\+\_\+state (\begin{DoxyParamCaption}\item[{unsigned int}]{seed }\end{DoxyParamCaption})}



Creates \hyperlink{structRNG__state__t}{R\+N\+G\+\_\+state\+\_\+t} instance for storing pseudorandom generator state. 

After calling shis method developer should call void \hyperlink{rng_8h_a682d4f3e410509ffdcf17afa3f7e2393}{delete\+\_\+\+R\+N\+G\+\_\+state(\+R\+N\+G\+\_\+state\+\_\+t $\ast$state)}, when no longer needs this object.


\begin{DoxyParams}{Parameters}
{\em seed} & seed which will determine pseudrandom numbers sequence. Passing {\bfseries 0} will use random seed (based on time)\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
pointer to initialized object with set seed. 
\end{DoxyReturn}
\mbox{\Hypertarget{rng_8h_a682d4f3e410509ffdcf17afa3f7e2393}\label{rng_8h_a682d4f3e410509ffdcf17afa3f7e2393}} 
\index{rng.\+h@{rng.\+h}!delete\+\_\+\+R\+N\+G\+\_\+state@{delete\+\_\+\+R\+N\+G\+\_\+state}}
\index{delete\+\_\+\+R\+N\+G\+\_\+state@{delete\+\_\+\+R\+N\+G\+\_\+state}!rng.\+h@{rng.\+h}}
\subsubsection{\texorpdfstring{delete\+\_\+\+R\+N\+G\+\_\+state()}{delete\_RNG\_state()}}
{\footnotesize\ttfamily void delete\+\_\+\+R\+N\+G\+\_\+state (\begin{DoxyParamCaption}\item[{\hyperlink{structRNG__state__t}{R\+N\+G\+\_\+state\+\_\+t} $\ast$}]{state }\end{DoxyParamCaption})}



Deletes \hyperlink{structRNG__state__t}{R\+N\+G\+\_\+state\+\_\+t} object. 

You should use this method to deallocate \hyperlink{structRNG__state__t}{R\+N\+G\+\_\+state\+\_\+t} obcect, after it\textquotesingle{}s no longer needed.


\begin{DoxyParams}{Parameters}
{\em state} & pointer to \hyperlink{structRNG__state__t}{R\+N\+G\+\_\+state\+\_\+t} object which should be deallocated. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{rng_8h_aaa40d02ceaf0ecc4a97d394914b21314}\label{rng_8h_aaa40d02ceaf0ecc4a97d394914b21314}} 
\index{rng.\+h@{rng.\+h}!norm\+\_\+rand@{norm\+\_\+rand}}
\index{norm\+\_\+rand@{norm\+\_\+rand}!rng.\+h@{rng.\+h}}
\subsubsection{\texorpdfstring{norm\+\_\+rand()}{norm\_rand()}}
{\footnotesize\ttfamily double norm\+\_\+rand (\begin{DoxyParamCaption}\item[{\hyperlink{structRNG__state__t}{R\+N\+G\+\_\+state\+\_\+t} $\ast$$\ast$}]{state }\end{DoxyParamCaption})}



Generates pseudorandom number based on Mersenne-\/\+Twister algorithm from normal distribution. 


\begin{DoxyParams}{Parameters}
{\em state} & R\+NG state. For details look at double \hyperlink{rng_8h_aee2f3820ccff61a0627c98890cd20b5c}{unif\+\_\+rand(\+R\+N\+G\+\_\+state\+\_\+t $\ast$$\ast$state)}\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Random number from normal distribution based on passed R\+NG state.
\end{DoxyReturn}
\begin{DoxyWarning}{Warning}
For generation numbers from uniform distribution use Instead use double rnorm(\+R\+N\+G\+\_\+state\+\_\+t $\ast$$\ast$state, double mu, double sigma) 
\end{DoxyWarning}
\mbox{\Hypertarget{rng_8h_aee2f3820ccff61a0627c98890cd20b5c}\label{rng_8h_aee2f3820ccff61a0627c98890cd20b5c}} 
\index{rng.\+h@{rng.\+h}!unif\+\_\+rand@{unif\+\_\+rand}}
\index{unif\+\_\+rand@{unif\+\_\+rand}!rng.\+h@{rng.\+h}}
\subsubsection{\texorpdfstring{unif\+\_\+rand()}{unif\_rand()}}
{\footnotesize\ttfamily double unif\+\_\+rand (\begin{DoxyParamCaption}\item[{\hyperlink{structRNG__state__t}{R\+N\+G\+\_\+state\+\_\+t} $\ast$$\ast$}]{state }\end{DoxyParamCaption})}



Generates pseudorandom number based on Mersenne-\/\+Twister algorithm from uniform distribution. 


\begin{DoxyParams}{Parameters}
{\em state} & object storing state of R\+NG. Passing {\bfseries N\+U\+LL} will create random seed based on time. Frequent calling this method while passing {\bfseries N\+U\+LL} can generate many same numbers (based on sam seed). First call with given object or with {\bfseries N\+U\+LL} can take longer due to R\+NG state initialization. Also regeneration of R\+NG state is required after each 624 numbers.\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Random number from uniform distribution based on passed R\+NG state.
\end{DoxyReturn}
\begin{DoxyWarning}{Warning}
For generation numbers from uniform distribution use Instead use double runif(\+R\+N\+G\+\_\+state\+\_\+t $\ast$$\ast$state, double a, double b) 
\end{DoxyWarning}
